buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url = "https://plugins.gradle.org/m2/"
            url = "http://files.minecraftforge.net/maven"
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id 'idea'
    id 'org.hidetake.ssh' version '2.10.1'
}

repositories {
    mavenLocal()
    mavenCentral()
    flatDir {
        dirs project.findProperty('libs') ?: project.file('/libs').getPath()
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

version = "1.12.2-1.10"
group = "de.fuzzlemann.ucutils"
archivesBaseName = "ucutils"

def buildFile = "$buildDir/libs/$archivesBaseName-${version}.jar"

configurations {
    shade
    compile.extendsFrom(shade)
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        scopes.COMPILE.plus += [configurations.shade]
    }
}

dependencies {
    provided fileTree(dir: 'libs', include: 'lb_api_mc1.12.2.jar')
    shade fileTree(dir: 'libs', include: 'common-1.1.5.jar')

    testImplementation 'org.reflections:reflections:0.9.11'
    testImplementation 'org.mockito:mockito-junit-jupiter:2.28.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.0-RC1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.0-RC1'
}

test {
    useJUnitPlatform()
}

compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
    options.compilerArgs += '-proc:none'
    options.encoding = 'UTF-8'
}

minecraft {
    version = "1.12.2-14.23.5.2838"
    runDir = "run"
    mappings = "stable_39"
}

sourceSets {
    main {
        java {
            srcDirs('src/main/java')
        }
        resources {
            srcDirs('src/main/resources')
        }
    }
    test {
        java {
            srcDirs('src/test/java')
        }
        resources {
            srcDirs('src/test/resources')
        }
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    ant.replaceregexp(
            file: './src/main/java/de/fuzzlemann/ucutils/commands/UCUtilsCommand.java',
            match: /\d+L; \/\/ updated by gradle/,
            replace: new Date().toTimestamp().getTime() + "L; // updated by gradle",
            flags: 'g',
            byline: true
    )
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

if (project.findProperty('host') != null) {
    remotes {
        fuzzlemann {
            host = project.findProperty('host')
            user = project.findProperty('user')
            identity = new File(project.findProperty('identity') as String)
        }
    }

    ssh.settings {
        knownHosts = addHostKey(file("$buildDir/known_hosts"))
    }

    task deployRemote(dependsOn: build) {
        doLast {
            ssh.run {
                session(remotes.fuzzlemann) {
                    put from: buildFile, into: '/var/www/html/UCUtils.jar'
                }
            }
        }
    }
}

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import java.util.concurrent.TimeUnit

task deployLocal(dependsOn: build) {
    doLast {
        def source = Paths.get(buildFile)
        def target = Paths.get(project.findProperty('target-path') as String)

        if (!source.toFile().exists()) {
            throw new IllegalStateException("Source file does not exist")
        }

        // retry until successful
        while (true) {
            try {
                Files.copy(source, target, StandardCopyOption.REPLACE_EXISTING)
            } catch (IOException e) {
                println("Copy operation failed: " + e.getMessage())
                println("trying again...")
                Thread.sleep(TimeUnit.SECONDS.toMillis(1))
                continue
            }

            println("Updated mods file")
            break
        }
    }
}

List<String> deactivatedTasks = Arrays.asList('check', 'sourceTestJava', 'compileTestJava', 'processTestResources', 'test', 'testClasses')
tasks.matching {
    Task task = (Task) it
    String taskName = task.name
    deactivatedTasks.contains(taskName)
}.all {
    if (project.findProperty('no-test')) {
        enabled = false
    }
}
